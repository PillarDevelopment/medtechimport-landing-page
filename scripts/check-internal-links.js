#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ —Å–∞–π—Ç–∞ –ú–µ–¥–¢–µ—Ö–ò–º–ø–æ—Ä—Ç
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
 * 1. –†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫
 * 2. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Å—ã–ª–æ–∫ –ø–ª–∞–Ω—É (15-18 —Å –≥–ª–∞–≤–Ω–æ–π, 6-8 —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
 * 3. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∫–æ—Ä–æ–≤
 * 4. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 */

const fs = require('fs');
const path = require('path');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

// –ü–ª–∞–Ω –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Å—ã–ª–æ–∫
const LINK_PLAN = {
  homepage: { min: 15, max: 18, description: '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞' },
  category: { min: 6, max: 8, description: '–°—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π' },
  catalog: { min: 10, max: 15, description: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–∞–ª–æ–≥–∞' },
  product: { min: 5, max: 8, description: '–°—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤' },
  other: { min: 3, max: 6, description: '–û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã' }
};

// –û–∂–∏–¥–∞–µ–º—ã–µ –∞–Ω–∫–æ—Ä—ã –¥–ª—è SEO
const EXPECTED_ANCHORS = {
  '/catalog/dental-burs': ['—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –±–æ—Ä—ã', '–±–æ—Ä—ã', 'dental-burs'],
  '/catalog/disposable-tips': ['–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –Ω–∞–∫–æ–Ω–µ—á–Ω–∏–∫–∏', '–Ω–∞–∫–æ–Ω–µ—á–Ω–∏–∫–∏', 'disposable-tips'],
  '/catalog/impression-materials': ['—Å–ª–µ–ø–æ—á–Ω—ã–µ –º–∞—Å—Å—ã', '–º–∞—Ç–µ—Ä–∏–∞–ª—ã', 'impression-materials'],
  '/catalog/disposable-instruments': ['–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', 'disposable-instruments'],
  '/catalog/retraction-cords': ['—Ä–µ—Ç—Ä–∞–∫—Ü–∏–æ–Ω–Ω—ã–µ –Ω–∏—Ç–∏', '–Ω–∏—Ç–∏', 'retraction-cords'],
  '/catalog': ['–∫–∞—Ç–∞–ª–æ–≥', '—Ç–æ–≤–∞—Ä—ã', 'catalog'],
  '/about': ['–æ –∫–æ–º–ø–∞–Ω–∏–∏', '–∫–æ–º–ø–∞–Ω–∏—è', 'about'],
  '/contact': ['–∫–æ–Ω—Ç–∞–∫—Ç—ã', '—Å–≤—è–∑–∞—Ç—å—Å—è', 'contact'],
  '/': ['–≥–ª–∞–≤–Ω–∞—è', 'home', '–º–µ–¥—Ç–µ—Ö–∏–º–ø–æ—Ä—Ç']
};

// –í–∞–ª–∏–¥–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã —Å–∞–π—Ç–∞
const VALID_ROUTES = [
  '/',
  '/catalog',
  '/catalog/dental-burs',
  '/catalog/disposable-tips', 
  '/catalog/impression-materials',
  '/catalog/disposable-instruments',
  '/catalog/retraction-cords',
  '/about',
  '/contact',
  '/delivery',
  '/warranty',
  '/privacy',
  '/terms'
];

class InternalLinksChecker {
  constructor() {
    this.results = {
      totalLinks: 0,
      workingLinks: 0,
      brokenLinks: 0,
      pages: {},
      duplicates: [],
      anchorIssues: [],
      countIssues: []
    };
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  async checkAll() {
    console.log(`${colors.cyan}${colors.bright}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ —Å–∞–π—Ç–∞ –ú–µ–¥–¢–µ—Ö–ò–º–ø–æ—Ä—Ç${colors.reset}\n`);
    
    const pages = this.getPagesToCheck();
    
    for (const page of pages) {
      await this.checkPage(page);
    }
    
    this.generateReport();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  getPagesToCheck() {
    const pages = [];
    const srcDir = path.join(process.cwd(), 'src');
    
    // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    pages.push({
      path: '/',
      file: path.join(srcDir, 'app/page.tsx'),
      type: 'homepage'
    });
    
    // –ö–∞—Ç–∞–ª–æ–≥
    pages.push({
      path: '/catalog',
      file: path.join(srcDir, 'app/catalog/page.tsx'),
      type: 'catalog'
    });
    
    // –°—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const categories = ['dental-burs', 'disposable-tips', 'impression-materials', 'disposable-instruments', 'retraction-cords'];
    categories.forEach(category => {
      pages.push({
        path: `/catalog/${category}`,
        file: path.join(srcDir, 'app/catalog/[category]/page.tsx'),
        type: 'category'
      });
    });
    
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    pages.push({
      path: '/about',
      file: path.join(srcDir, 'app/about/page.tsx'),
      type: 'other'
    });
    
    pages.push({
      path: '/contact',
      file: path.join(srcDir, 'app/contact/page.tsx'),
      type: 'other'
    });
    
    return pages;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  async checkPage(pageInfo) {
    if (!fs.existsSync(pageInfo.file)) {
      console.log(`${colors.red}‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${pageInfo.file}${colors.reset}`);
      return;
    }

    const content = fs.readFileSync(pageInfo.file, 'utf8');
    const links = this.extractLinks(content, pageInfo.path);
    
    this.results.pages[pageInfo.path] = {
      type: pageInfo.type,
      links: links,
      count: links.length
    };
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Å—ã–ª–æ–∫
    this.checkLinkCount(pageInfo.path, pageInfo.type, links.length);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    this.checkDuplicates(pageInfo.path, links);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∫–æ—Ä–æ–≤
    this.checkAnchors(pageInfo.path, links);
    
    console.log(`${colors.green}‚úÖ ${pageInfo.path}${colors.reset} - –Ω–∞–π–¥–µ–Ω–æ ${colors.blue}${links.length}${colors.reset} —Å—Å—ã–ª–æ–∫`);
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  extractLinks(content, pagePath) {
    const links = [];
    
    // –ü–æ–∏—Å–∫ Link href=
    const linkMatches = content.match(/Link\s+href=["']([^"']+)["']/g) || [];
    linkMatches.forEach(match => {
      const href = match.match(/href=["']([^"']+)["']/)[1];
      const anchor = this.extractAnchor(content, match);
      links.push({ href, anchor, type: 'Link' });
    });
    
    // –ü–æ–∏—Å–∫ href= (–æ–±—ã—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏)
    const hrefMatches = content.match(/href=["']([^"']+)["']/g) || [];
    hrefMatches.forEach(match => {
      const href = match.match(/href=["']([^"']+)["']/)[1];
      if (!href.startsWith('http') && !href.startsWith('mailto:') && !href.startsWith('tel:')) {
        const anchor = this.extractAnchor(content, match);
        links.push({ href, anchor, type: 'href' });
      }
    });
    
    return links;
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–Ω–∫–æ—Ä–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  extractAnchor(content, linkMatch) {
    const index = content.indexOf(linkMatch);
    const beforeLink = content.substring(Math.max(0, index - 200), index);
    const afterLink = content.substring(index, index + 200);
    
    // –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞ –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏
    const textMatch = afterLink.match(/>([^<]+)</);
    if (textMatch) {
      return textMatch[1].trim();
    }
    
    return '–ë–µ–∑ –∞–Ω–∫–æ—Ä–∞';
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Å—ã–ª–æ–∫
  checkLinkCount(pagePath, pageType, count) {
    const plan = LINK_PLAN[pageType] || LINK_PLAN.other;
    
    if (count < plan.min || count > plan.max) {
      this.results.countIssues.push({
        page: pagePath,
        type: pageType,
        current: count,
        expected: `${plan.min}-${plan.max}`,
        description: plan.description
      });
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å—Å—ã–ª–æ–∫
  checkDuplicates(pagePath, links) {
    const hrefs = links.map(link => link.href);
    const duplicates = hrefs.filter((href, index) => hrefs.indexOf(href) !== index);
    
    if (duplicates.length > 0) {
      this.results.duplicates.push({
        page: pagePath,
        duplicates: [...new Set(duplicates)]
      });
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∫–æ—Ä–æ–≤
  checkAnchors(pagePath, links) {
    links.forEach(link => {
      if (EXPECTED_ANCHORS[link.href]) {
        const expectedAnchors = EXPECTED_ANCHORS[link.href];
        const hasGoodAnchor = expectedAnchors.some(expected => 
          link.anchor.toLowerCase().includes(expected.toLowerCase())
        );
        
        if (!hasGoodAnchor) {
          this.results.anchorIssues.push({
            page: pagePath,
            href: link.href,
            currentAnchor: link.anchor,
            expectedAnchors: expectedAnchors
          });
        }
      }
    });
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
  generateReport() {
    console.log(`\n${colors.cyan}${colors.bright}üìä –û–¢–ß–ï–¢ –ü–û –ü–†–û–í–ï–†–ö–ï –í–ù–£–¢–†–ï–ù–ù–ò–• –°–°–´–õ–û–ö${colors.reset}\n`);
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalLinks = Object.values(this.results.pages).reduce((sum, page) => sum + page.count, 0);
    console.log(`${colors.blue}üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:${colors.reset}`);
    console.log(`   –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: ${colors.green}${totalLinks}${colors.reset}`);
    console.log(`   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${colors.green}${Object.keys(this.results.pages).length}${colors.reset}\n`);
    
    // –î–µ—Ç–∞–ª–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    console.log(`${colors.blue}üìÑ –î–µ—Ç–∞–ª–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º:${colors.reset}`);
    Object.entries(this.results.pages).forEach(([pagePath, pageData]) => {
      const plan = LINK_PLAN[pageData.type] || LINK_PLAN.other;
      const status = pageData.count >= plan.min && pageData.count <= plan.max ? 
        `${colors.green}‚úÖ${colors.reset}` : `${colors.red}‚ùå${colors.reset}`;
      
      console.log(`   ${status} ${pagePath} - ${pageData.count} —Å—Å—ã–ª–æ–∫ (–ø–ª–∞–Ω: ${plan.min}-${plan.max})`);
    });
    
    // –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Å—ã–ª–æ–∫
    if (this.results.countIssues.length > 0) {
      console.log(`\n${colors.red}‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Å—ã–ª–æ–∫:${colors.reset}`);
      this.results.countIssues.forEach(issue => {
        console.log(`   ${colors.red}‚ùå${colors.reset} ${issue.page}: ${issue.current} —Å—Å—ã–ª–æ–∫ (–æ–∂–∏–¥–∞–µ—Ç—Å—è: ${issue.expected})`);
      });
    }
    
    // –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å—Å—ã–ª–∫–∏
    if (this.results.duplicates.length > 0) {
      console.log(`\n${colors.yellow}‚ö†Ô∏è  –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å—Å—ã–ª–∫–∏:${colors.reset}`);
      this.results.duplicates.forEach(duplicate => {
        console.log(`   ${colors.yellow}üîÑ${colors.reset} ${duplicate.page}:`);
        duplicate.duplicates.forEach(dup => {
          console.log(`      - ${dup}`);
        });
      });
    }
    
    // –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–Ω–∫–æ—Ä–∞–º–∏
    if (this.results.anchorIssues.length > 0) {
      console.log(`\n${colors.magenta}‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–Ω–∫–æ—Ä–∞–º–∏:${colors.reset}`);
      this.results.anchorIssues.forEach(issue => {
        console.log(`   ${colors.magenta}üè∑Ô∏è${colors.reset} ${issue.page} ‚Üí ${issue.href}`);
        console.log(`      –¢–µ–∫—É—â–∏–π –∞–Ω–∫–æ—Ä: "${issue.currentAnchor}"`);
        console.log(`      –û–∂–∏–¥–∞–µ–º—ã–µ: ${issue.expectedAnchors.join(', ')}`);
      });
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    this.generateRecommendations();
    
    // –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    const totalIssues = this.results.countIssues.length + this.results.duplicates.length + this.results.anchorIssues.length;
    if (totalIssues === 0) {
      console.log(`\n${colors.green}${colors.bright}üéâ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!${colors.reset}`);
    } else {
      console.log(`\n${colors.yellow}${colors.bright}üìã –ù–∞–π–¥–µ–Ω–æ ${totalIssues} –ø—Ä–æ–±–ª–µ–º, —Ç—Ä–µ–±—É—é—â–∏—Ö –≤–Ω–∏–º–∞–Ω–∏—è${colors.reset}`);
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  generateRecommendations() {
    console.log(`\n${colors.cyan}üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:${colors.reset}`);
    
    if (this.results.countIssues.length > 0) {
      console.log(`   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –ø–ª–∞–Ω—É`);
    }
    
    if (this.results.duplicates.length > 0) {
      console.log(`   ‚Ä¢ –£–¥–∞–ª–∏—Ç–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å—Å—ã–ª–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX`);
    }
    
    if (this.results.anchorIssues.length > 0) {
      console.log(`   ‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ –∞–Ω–∫–æ—Ä—ã —Å—Å—ã–ª–æ–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ SEO`);
    }
    
    console.log(`   ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å—Å—ã–ª–æ–∫`);
    console.log(`   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –∞–Ω–∫–æ—Ä—ã —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏`);
    console.log(`   ‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ`);
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
if (require.main === module) {
  const checker = new InternalLinksChecker();
  checker.checkAll().catch(console.error);
}

module.exports = InternalLinksChecker;
