#!/usr/bin/env node

/**
 * –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫
 * 
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:
 * 1. –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Å—ã–ª–æ–∫
 * 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ HTTP
 * 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
 */

const InternalLinksChecker = require('./check-internal-links');
const LinkHealthChecker = require('./check-link-health');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  magenta: '\x1b[35m'
};

class ComprehensiveLinkChecker {
  constructor(baseUrl = 'http://localhost:3000') {
    this.baseUrl = baseUrl;
    this.results = {
      codeAnalysis: null,
      healthCheck: null,
      overallScore: 0
    };
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  async checkAll() {
    console.log(`${colors.magenta}${colors.bright}üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–ù–£–¢–†–ï–ù–ù–ò–• –°–°–´–õ–û–ö${colors.reset}`);
    console.log(`${colors.magenta}${'='.repeat(60)}${colors.reset}\n`);
    
    try {
      // 1. –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
      console.log(`${colors.cyan}${colors.bright}üìã –≠–¢–ê–ü 1: –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Å—ã–ª–æ–∫${colors.reset}`);
      console.log(`${colors.cyan}${'-'.repeat(50)}${colors.reset}`);
      
      const codeChecker = new InternalLinksChecker();
      await codeChecker.checkAll();
      this.results.codeAnalysis = codeChecker.results;
      
      console.log(`\n${colors.green}‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω${colors.reset}\n`);
      
      // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
      console.log(`${colors.cyan}${colors.bright}üåê –≠–¢–ê–ü 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–æ–∫${colors.reset}`);
      console.log(`${colors.cyan}${'-'.repeat(50)}${colors.reset}`);
      
      const healthChecker = new LinkHealthChecker(this.baseUrl);
      await healthChecker.checkAll();
      this.results.healthCheck = healthChecker.results;
      
      console.log(`\n${colors.green}‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞${colors.reset}\n`);
      
      // 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
      this.generateFinalReport();
      
    } catch (error) {
      console.error(`${colors.red}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}${colors.reset}`);
      process.exit(1);
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
  generateFinalReport() {
    console.log(`${colors.magenta}${colors.bright}üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢${colors.reset}`);
    console.log(`${colors.magenta}${'='.repeat(60)}${colors.reset}\n`);
    
    // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞
    this.calculateOverallScore();
    
    // –°–≤–æ–¥–∫–∞ –ø–æ —ç—Ç–∞–ø–∞–º
    console.log(`${colors.blue}üìà –°–≤–æ–¥–∫–∞ –ø–æ —ç—Ç–∞–ø–∞–º:${colors.reset}`);
    
    // –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
    const codeIssues = this.results.codeAnalysis.countIssues.length + 
                      this.results.codeAnalysis.duplicates.length + 
                      this.results.codeAnalysis.anchorIssues.length;
    
    const codeStatus = codeIssues === 0 ? 
      `${colors.green}‚úÖ –û—Ç–ª–∏—á–Ω–æ${colors.reset}` : 
      `${colors.yellow}‚ö†Ô∏è  ${codeIssues} –ø—Ä–æ–±–ª–µ–º${colors.reset}`;
    
    console.log(`   üìã –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞: ${codeStatus}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    const healthSuccessRate = (this.results.healthCheck.working / this.results.healthCheck.total * 100).toFixed(1);
    const healthStatus = this.results.healthCheck.broken === 0 ? 
      `${colors.green}‚úÖ ${healthSuccessRate}% —Ä–∞–±–æ—Ç–∞—é—Ç${colors.reset}` : 
      `${colors.red}‚ùå ${this.results.healthCheck.broken} –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç${colors.reset}`;
    
    console.log(`   üåê –†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: ${healthStatus}`);
    
    // –û–±—â–∏–π –±–∞–ª–ª
    console.log(`\n${colors.blue}üéØ –û–±—â–∏–π –±–∞–ª–ª: ${this.getScoreColor()}${this.results.overallScore}/100${colors.reset}`);
    
    // –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    this.generateDetailedRecommendations();
    
    // –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π
    this.generateActionPlan();
  }

  // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞
  calculateOverallScore() {
    let score = 100;
    
    // –®—Ç—Ä–∞—Ñ—ã –∑–∞ –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–¥–µ
    const codeIssues = this.results.codeAnalysis.countIssues.length + 
                      this.results.codeAnalysis.duplicates.length + 
                      this.results.codeAnalysis.anchorIssues.length;
    score -= codeIssues * 10;
    
    // –®—Ç—Ä–∞—Ñ—ã –∑–∞ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–µ —Å—Å—ã–ª–∫–∏
    const brokenLinks = this.results.healthCheck.broken;
    score -= brokenLinks * 15;
    
    // –®—Ç—Ä–∞—Ñ—ã –∑–∞ –º–µ–¥–ª–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    const slowLinks = this.results.healthCheck.slow;
    score -= slowLinks * 5;
    
    this.results.overallScore = Math.max(0, score);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –±–∞–ª–ª–∞
  getScoreColor() {
    if (this.results.overallScore >= 90) return colors.green;
    if (this.results.overallScore >= 70) return colors.yellow;
    return colors.red;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  generateDetailedRecommendations() {
    console.log(`\n${colors.cyan}üí° –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:${colors.reset}`);
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–¥—É
    if (this.results.codeAnalysis.countIssues.length > 0) {
      console.log(`\n${colors.yellow}üìä –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Å—ã–ª–æ–∫:${colors.reset}`);
      this.results.codeAnalysis.countIssues.forEach(issue => {
        console.log(`   ‚Ä¢ ${issue.page}: ${issue.current} —Å—Å—ã–ª–æ–∫ (–æ–∂–∏–¥–∞–µ—Ç—Å—è: ${issue.expected})`);
      });
    }
    
    if (this.results.codeAnalysis.duplicates.length > 0) {
      console.log(`\n${colors.yellow}üîÑ –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å—Å—ã–ª–∫–∏:${colors.reset}`);
      this.results.codeAnalysis.duplicates.forEach(duplicate => {
        console.log(`   ‚Ä¢ ${duplicate.page}: ${duplicate.duplicates.join(', ')}`);
      });
    }
    
    if (this.results.codeAnalysis.anchorIssues.length > 0) {
      console.log(`\n${colors.yellow}üè∑Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–Ω–∫–æ—Ä–∞–º–∏:${colors.reset}`);
      this.results.codeAnalysis.anchorIssues.forEach(issue => {
        console.log(`   ‚Ä¢ ${issue.page} ‚Üí ${issue.href}: "${issue.currentAnchor}"`);
      });
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    if (this.results.healthCheck.broken > 0) {
      console.log(`\n${colors.red}üîó –ù–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–µ —Å—Å—ã–ª–∫–∏:${colors.reset}`);
      this.results.healthCheck.details
        .filter(detail => detail.status === 'broken' || detail.status === 'error')
        .forEach(detail => {
          console.log(`   ‚Ä¢ ${detail.route}: ${detail.statusCode || detail.error}`);
        });
    }
    
    if (this.results.healthCheck.slow > 0) {
      console.log(`\n${colors.yellow}üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏:${colors.reset}`);
      this.results.healthCheck.details
        .filter(detail => detail.isSlow)
        .forEach(detail => {
          console.log(`   ‚Ä¢ ${detail.route}: ${detail.responseTime}ms`);
        });
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π
  generateActionPlan() {
    console.log(`\n${colors.cyan}üìã –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:${colors.reset}`);
    
    const hasCodeIssues = this.results.codeAnalysis.countIssues.length > 0 || 
                         this.results.codeAnalysis.duplicates.length > 0 || 
                         this.results.codeAnalysis.anchorIssues.length > 0;
    
    const hasHealthIssues = this.results.healthCheck.broken > 0 || 
                           this.results.healthCheck.slow > 0;
    
    if (hasCodeIssues) {
      console.log(`\n${colors.blue}1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –≤ –∫–æ–¥–µ:${colors.reset}`);
      if (this.results.codeAnalysis.countIssues.length > 0) {
        console.log(`   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ/—É–¥–∞–ª–∏—Ç–µ —Å—Å—ã–ª–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–ª–∞–Ω—É`);
      }
      if (this.results.codeAnalysis.duplicates.length > 0) {
        console.log(`   ‚Ä¢ –£–¥–∞–ª–∏—Ç–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å—Å—ã–ª–∫–∏`);
      }
      if (this.results.codeAnalysis.anchorIssues.length > 0) {
        console.log(`   ‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ –∞–Ω–∫–æ—Ä—ã –¥–ª—è –ª—É—á—à–µ–≥–æ SEO`);
      }
    }
    
    if (hasHealthIssues) {
      console.log(`\n${colors.blue}2. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é:${colors.reset}`);
      if (this.results.healthCheck.broken > 0) {
        console.log(`   ‚Ä¢ –ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã`);
        console.log(`   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Next.js`);
      }
      if (this.results.healthCheck.slow > 0) {
        console.log(`   ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü`);
        console.log(`   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ`);
      }
    }
    
    console.log(`\n${colors.blue}3. –†–µ–≥—É–ª—è—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:${colors.reset}`);
    console.log(`   ‚Ä¢ –ó–∞–ø—É—Å–∫–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
    console.log(`   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏`);
    console.log(`   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ`);
    
    // –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
    console.log(`\n${colors.green}üéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:${colors.reset}`);
    if (this.results.overallScore >= 90) {
      console.log(`   ‚Ä¢ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å`);
      console.log(`   ‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫`);
    } else if (this.results.overallScore >= 70) {
      console.log(`   ‚Ä¢ –•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞, –Ω–æ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è`);
      console.log(`   ‚Ä¢ –ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã`);
    } else {
      console.log(`   ‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏`);
      console.log(`   ‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º`);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
if (require.main === module) {
  const baseUrl = process.argv[2] || 'http://localhost:3000';
  const checker = new ComprehensiveLinkChecker(baseUrl);
  checker.checkAll().catch(console.error);
}

module.exports = ComprehensiveLinkChecker;
