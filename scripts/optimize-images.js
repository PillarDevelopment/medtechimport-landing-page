#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  inputDir: './public/images/originals',
  outputDir: './public/images/products',
  thumbnailDir: './public/images/thumbnails',
  sizes: {
    catalog: { width: 400, height: 300, quality: 85 },
    product: { width: 600, height: 600, quality: 90 },
    thumbnail: { width: 150, height: 150, quality: 80 }
  }
};

// –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
function createDirectories() {
  [config.outputDir, config.thumbnailDir].forEach(dir => {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
  });
}

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
function optimizeImage(inputPath, outputPath, size, quality) {
  try {
    const command = `magick "${inputPath}" -resize ${size.width}x${size.height}^ -gravity center -extent ${size.width}x${size.height} -quality ${quality} -format webp "${outputPath}"`;
    execSync(command, { stdio: 'inherit' });
    console.log(`‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${path.basename(inputPath)}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ${inputPath}:`, error.message);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function processImages() {
  if (!fs.existsSync(config.inputDir)) {
    console.log(`‚ùå –ü–∞–ø–∫–∞ ${config.inputDir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    return;
  }

  const files = fs.readdirSync(config.inputDir)
    .filter(file => /\.(jpg|jpeg|png)$/i.test(file));

  console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${files.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);

  files.forEach(file => {
    const inputPath = path.join(config.inputDir, file);
    const baseName = path.parse(file).name;

    // –°–æ–∑–¥–∞—Ç—å –≤–µ—Ä—Å–∏–∏ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
    const catalogPath = path.join(config.outputDir, `${baseName}-catalog.webp`);
    optimizeImage(inputPath, catalogPath, config.sizes.catalog, config.sizes.catalog.quality);

    // –°–æ–∑–¥–∞—Ç—å –≤–µ—Ä—Å–∏–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞
    const productPath = path.join(config.outputDir, `${baseName}-product.webp`);
    optimizeImage(inputPath, productPath, config.sizes.product, config.sizes.product.quality);

    // –°–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–∞—Ç—é—Ä—ã
    const thumbnailPath = path.join(config.thumbnailDir, `${baseName}-thumb.webp`);
    optimizeImage(inputPath, thumbnailPath, config.sizes.thumbnail, config.sizes.thumbnail.quality);
  });

  console.log('üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
  createDirectories();
  processImages();
}

if (require.main === module) {
  main();
}

module.exports = { optimizeImage, processImages };
