#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–æ–∫ —á–µ—Ä–µ–∑ HTTP-–∑–∞–ø—Ä–æ—Å—ã
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
 * 1. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
 * 2. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞
 * 3. –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞
 */

const http = require('http');
const https = require('https');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

class LinkHealthChecker {
  constructor(baseUrl = 'http://localhost:3000') {
    this.baseUrl = baseUrl;
    this.results = {
      total: 0,
      working: 0,
      broken: 0,
      slow: 0,
      details: []
    };
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  async checkAll() {
    console.log(`${colors.cyan}${colors.bright}üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–æ–∫${colors.reset}\n`);
    console.log(`–ë–∞–∑–æ–≤—ã–π URL: ${colors.blue}${this.baseUrl}${colors.reset}\n`);
    
    const routes = this.getRoutesToCheck();
    
    for (const route of routes) {
      await this.checkRoute(route);
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await this.delay(100);
    }
    
    this.generateReport();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  getRoutesToCheck() {
    return [
      '/',
      '/catalog',
      '/catalog/dental-burs',
      '/catalog/disposable-tips',
      '/catalog/impression-materials',
      '/catalog/disposable-instruments',
      '/catalog/retraction-cords',
      '/about',
      '/contact'
    ];
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
  async checkRoute(route) {
    const url = `${this.baseUrl}${route}`;
    const startTime = Date.now();
    
    try {
      const response = await this.makeRequest(url);
      const responseTime = Date.now() - startTime;
      
      this.results.total++;
      
      if (response.statusCode >= 200 && response.statusCode < 400) {
        this.results.working++;
        
        if (responseTime > 2000) {
          this.results.slow++;
        }
        
        const status = responseTime > 2000 ? 
          `${colors.yellow}üêå${colors.reset}` : 
          `${colors.green}‚úÖ${colors.reset}`;
        
        console.log(`${status} ${route} - ${response.statusCode} (${responseTime}ms)`);
        
        this.results.details.push({
          route,
          status: 'working',
          statusCode: response.statusCode,
          responseTime,
          isSlow: responseTime > 2000
        });
      } else {
        this.results.broken++;
        console.log(`${colors.red}‚ùå${colors.reset} ${route} - ${response.statusCode} (${responseTime}ms)`);
        
        this.results.details.push({
          route,
          status: 'broken',
          statusCode: response.statusCode,
          responseTime,
          isSlow: false
        });
      }
    } catch (error) {
      this.results.total++;
      this.results.broken++;
      console.log(`${colors.red}‚ùå${colors.reset} ${route} - –û—à–∏–±–∫–∞: ${error.message}`);
      
      this.results.details.push({
        route,
        status: 'error',
        statusCode: 0,
        responseTime: Date.now() - startTime,
        error: error.message,
        isSlow: false
      });
    }
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP-–∑–∞–ø—Ä–æ—Å–∞
  makeRequest(url) {
    return new Promise((resolve, reject) => {
      const isHttps = url.startsWith('https://');
      const client = isHttps ? https : http;
      
      const req = client.request(url, {
        method: 'GET',
        timeout: 10000,
        headers: {
          'User-Agent': 'Internal-Links-Checker/1.0'
        }
      }, (res) => {
        resolve({
          statusCode: res.statusCode,
          headers: res.headers
        });
      });
      
      req.on('error', reject);
      req.on('timeout', () => {
        req.destroy();
        reject(new Error('Request timeout'));
      });
      
      req.end();
    });
  }

  // –ó–∞–¥–µ—Ä–∂–∫–∞
  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
  generateReport() {
    console.log(`\n${colors.cyan}${colors.bright}üìä –û–¢–ß–ï–¢ –ü–û –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò –°–°–´–õ–û–ö${colors.reset}\n`);
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log(`${colors.blue}üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:${colors.reset}`);
    console.log(`   –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${colors.blue}${this.results.total}${colors.reset}`);
    console.log(`   –†–∞–±–æ—Ç–∞—é—â–∏—Ö: ${colors.green}${this.results.working}${colors.reset}`);
    console.log(`   –ù–µ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö: ${colors.red}${this.results.broken}${colors.reset}`);
    console.log(`   –ú–µ–¥–ª–µ–Ω–Ω—ã—Ö (>2—Å): ${colors.yellow}${this.results.slow}${colors.reset}\n`);
    
    // –î–µ—Ç–∞–ª–∏ –ø–æ –º–∞—Ä—à—Ä—É—Ç–∞–º
    console.log(`${colors.blue}üìÑ –î–µ—Ç–∞–ª–∏ –ø–æ –º–∞—Ä—à—Ä—É—Ç–∞–º:${colors.reset}`);
    this.results.details.forEach(detail => {
      let statusIcon = '';
      let statusColor = '';
      
      switch (detail.status) {
        case 'working':
          statusIcon = detail.isSlow ? 'üêå' : '‚úÖ';
          statusColor = detail.isSlow ? colors.yellow : colors.green;
          break;
        case 'broken':
          statusIcon = '‚ùå';
          statusColor = colors.red;
          break;
        case 'error':
          statusIcon = 'üí•';
          statusColor = colors.red;
          break;
      }
      
      console.log(`   ${statusColor}${statusIcon}${colors.reset} ${detail.route}`);
      console.log(`      –°—Ç–∞—Ç—É—Å: ${detail.statusCode || '–û—à–∏–±–∫–∞'}`);
      console.log(`      –í—Ä–µ–º—è: ${detail.responseTime}ms`);
      if (detail.error) {
        console.log(`      –û—à–∏–±–∫–∞: ${detail.error}`);
      }
      console.log('');
    });
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    this.generateRecommendations();
    
    // –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    const successRate = (this.results.working / this.results.total * 100).toFixed(1);
    if (this.results.broken === 0 && this.results.slow === 0) {
      console.log(`\n${colors.green}${colors.bright}üéâ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ —Å—Å—ã–ª–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –±—ã—Å—Ç—Ä–æ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!${colors.reset}`);
    } else if (this.results.broken === 0) {
      console.log(`\n${colors.yellow}${colors.bright}‚ö†Ô∏è  –í—Å–µ —Å—Å—ã–ª–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç, –Ω–æ –µ—Å—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–µ (${this.results.slow})${colors.reset}`);
    } else {
      console.log(`\n${colors.red}${colors.bright}‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã: ${this.results.broken} –Ω–µ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å—Å—ã–ª–æ–∫${colors.reset}`);
    }
    
    console.log(`\n–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: ${colors.blue}${successRate}%${colors.reset}`);
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  generateRecommendations() {
    console.log(`${colors.cyan}üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:${colors.reset}`);
    
    if (this.results.broken > 0) {
      console.log(`   ‚Ä¢ –ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ —Å—Å—ã–ª–∫–∏`);
      console.log(`   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ Next.js`);
    }
    
    if (this.results.slow > 0) {
      console.log(`   ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –º–µ–¥–ª–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã`);
      console.log(`   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞`);
    }
    
    console.log(`   ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å—Å—ã–ª–æ–∫`);
    console.log(`   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞`);
    console.log(`   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏`);
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
if (require.main === module) {
  const baseUrl = process.argv[2] || 'http://localhost:3000';
  const checker = new LinkHealthChecker(baseUrl);
  checker.checkAll().catch(console.error);
}

module.exports = LinkHealthChecker;
